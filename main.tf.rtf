{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 provider "aws" \{\
  region = "us-east-1"\
\}\
\
# Cria\'e7\'e3o do API Gateway\
resource "aws_apigatewayv2_api" "api_gateway" \{\
  name          = "example-api"\
  protocol_type = "HTTP"\
\}\
\
# Cria\'e7\'e3o do Lambda Function\
resource "aws_iam_role" "lambda_exec_role" \{\
  name = "lambda_exec_role"\
\
  assume_role_policy = jsonencode(\{\
    Version = "2012-10-17"\
    Statement = [\{\
      Action    = "sts:AssumeRole"\
      Effect    = "Allow"\
      Principal = \{ Service = "lambda.amazonaws.com" \}\
    \}]\
  \})\
\}\
\
resource "aws_lambda_function" "example_lambda" \{\
  function_name = "example_function"\
  role          = aws_iam_role.lambda_exec_role.arn\
  runtime       = "nodejs18.x"\
  handler       = "index.handler"\
\
  # Arquivo zip do c\'f3digo da Lambda\
  filename      = \'93lambdas/lambda_function.zip"\
\}\
\
# Vinculando Lambda ao API Gateway\
resource "aws_apigatewayv2_integration" "lambda_integration" \{\
  api_id           = aws_apigatewayv2_api.api_gateway.id\
  integration_type = "AWS_PROXY"\
  integration_uri  = aws_lambda_function.example_lambda.invoke_arn\
\}\
\
resource "aws_apigatewayv2_route" "api_route" \{\
  api_id    = aws_apigatewayv2_api.api_gateway.id\
  route_key = "GET /example"\
  target    = "integrations/$\{aws_apigatewayv2_integration.lambda_integration.id\}"\
\}\
\
resource "aws_apigatewayv2_stage" "api_stage" \{\
  api_id      = aws_apigatewayv2_api.api_gateway.id\
  name        = "$default"\
  auto_deploy = true\
\}\
\
# Amazon SQS Queue\
resource "aws_sqs_queue" "example_queue" \{\
  name = "example_queue"\
\}\
\
# Amazon EventBridge Rule\
resource "aws_cloudwatch_event_rule" "example_rule" \{\
  name        = "example_rule"\
  description = "Example EventBridge rule"\
  event_pattern = jsonencode(\{\
    source = ["example.source"]\
  \})\
\}\
\
# EventBridge Target\
resource "aws_cloudwatch_event_target" "example_target" \{\
  rule      = aws_cloudwatch_event_rule.example_rule.name\
  target_id = "lambda_target"\
  arn       = aws_lambda_function.example_lambda.arn\
\}\
\
# DynamoDB Table\
resource "aws_dynamodb_table" "example_table" \{\
  name           = "example_table"\
  billing_mode   = "PAY_PER_REQUEST"\
  hash_key       = "id"\
\
  attribute \{\
    name = "id"\
    type = "S"\
  \}\
\}\
\
# RDS Instance\
resource "aws_db_instance" "example_db" \{\
  allocated_storage    = 20\
  engine               = "mysql"\
  engine_version       = "8.0"\
  instance_class       = "db.t3.micro"\
  name                 = "exampledb"\
  username             = "admin"\
  password             = "password123"\
  skip_final_snapshot  = true\
\}}